                                    Getting Started with JSP

Setting Up the Development Environment Overview
    Must Have Java Development Kit (JDK)
    We Must Have the Java Development Kit (JDK) Installed
        -> Visit Oracle’s website to download and install JDK not the JRE
    To Build JSP Applications, we need the following:
        1. Java Application Server -> Tomcat Server
        2. Java Integrated Development Environment (IDE) -> Eclipse
    java jdk 9
    https://www.oracle.com/java/technologies/javase/javase9-archive-downloads.html
        jdk-9.0.4_windows-x64_bin.exe
        jre-9.0.4_windows-x64_bin.exe
        -> After that check installed C:\Program Files\Java
    Set Environment Variable
        Control Panel -> System and Security -> System -> Advanced System Setting
        In "System Variable" go to "Path" then add Java jdk and Java jre
            C:\Program Files\Java\jdk-9.0.4\bin
            C:\Program Files\Java\jre-9.0.4\bin
        System Variable -> Add
            Name: JAVA_HOME
            Value: C:\Program Files\Java\jdk-9.0.4
    After all cmd to check installed: java --version
Installing Tomcat on MS Windows
    Tomcat Version:
        New version of Tomcat 10 was released to support Jakarta EE 9(around February, 2021)
        In this release they renamed the packages, javax.* to jakarta.*
        This is a breaking change for java EE apps
        We will use Tomcat 9
    https://tomcat.apache.org/ -> https://tomcat.apache.org/download-90.cgi
        32-bit/64-bit Windows Service Installer (pgp, sha512)
    When install -> Select the type of install: Full
    Username: admin 
    Password: admin
    Turn of option "Show Readme"
    Verify the Installation: http://localhost:8080/
    services.msc -> service(local) -> Apache Tomcat 9.0 Tomcat9 -> Start or Stop
    Stop it and we will start it via Eclipse later 
Installing Eclipse on MS Windows
    https://www.eclipse.org/downloads/packages/
    Eclipse IDE for Enterprise Java and Web Developers
    eclipse-jee-2021-03-R-win32-x86_64.zip
Connecting Eclipse to Tomcat
    Benefits:
        Start Tomcat from Eclipse
        Easily deploy Application directly to Tomcat
    Workspace
        C:\Users\vudinhquang\eclipse-workspace
    Open Eclipse and at the bottom section there is a tab called servers and click on it. We do not have any servers
        associated with our Eclipse Environment at the time. So we need to do is click on link and add new server that poits 
        to our Tomcat that we installed
    Apache folder and scroll to select Tomcat 9
        Tomcat installation directly: Tell Eclipse where Tomcat is installed
            C:\Program Files\Apache Software Foundation\Tomcat 9.0

    ==================================================================================================================

                        JSP Fundamentals

JSP Hello World
    What is a JSP file?
        An HTML page with some Java code sprinkled in
        Include dynamic content from Java code
    Where is the JSP processed?
        JSP is processed on the server
        Results of Java code included in HTML returned to browser
    Where to place JSP file?
        The JSP file goes in our webapp folder
        Must have .jsp extension
    File -> New -> Dynamic Web Project
    webapp -> New -> File -> create helloworld.jsp
    Build to run:
        Right click on helloworld.jsp -> Run as -> Run on server
    The server canot be started because one or more of the ports are invalid
        Servers -> server.xml -> Server -> port -> change -1 to 8081
    http://localhost:8080/jspdemo/helloworld.jsp
JSP Expressions
    JSP Expression: <%= some Java expression %>
    JSP Scriptlet: <% some Java code: 1 to many lines %>
    JSP Declaration: <%! variable or method declaration %>
    JSP Expression: 
        Compute an expression   
        Result is included in HTML returned to browser
    http://localhost:8080/jspdemo/expression-test.jsp
JSP Scriptlets
JSP Declarations
Calling a Java Class from JSP
    Minimize the scriptlets and declarations in a JSP
    Avoid dumping thousands of lines of code in a JSP
    Refactor this into a separate Java class … make use of MVC
    src/main/java -> New -> Package -> com.luv2code.jsp
    com.luv2code.jsp -> New -> Class -> FunUtils
JSP Built-In Objects
Including Files in JSP

    ==================================================================================================================

                        Reading HTML Form Data with JSP

HTML Forms Overview
Drop-Down Lists
Radio Buttons
Checkboxes

    ==================================================================================================================

                        State Management with JSP

Tracking user actions with Sessions - Overview
    JSP session is created once for user's browser session. Unique for this user
    Commonly used when you need to keep track of the user's actions
    JSP Session - Other useful methods
    isNew() : boolean Returns true if the session is new
    getId() : String Returns the session id
    invalidate() : void Invalidates this session and unbinds any object associated with it
    setMaxInactiveInterval(long mills) : void Sets the idle time for a session to expire. The value is supplied in milliseconds
Tracking user actions with Sessions - Write some Code
    Method signature
        session.setAttribute(String name, Object value)
    List<String> items = (List<String>) session.getAttribute("myToDoList");
    items.add(theItem);
    Since we're using object references, remember that "items" is a variable that holds a reference to an object. Then 
    it points to the same area of memory that is used by the session. So in effect, the users's session has now been updated with 
    this new entry.
Personalize Content with Cookies - Overview
    Text data exchanged between web browser and server
    Browser will only send cookies that match the server’s domain name
Personalize Content with Cookies - Write some Code

    ==================================================================================================================

                        JSP Standard Tag Library(JSTL) - Core Tags

Install JSTL JAR files
    Five tag libraries in JSTL: 
        Core
        Messages Formatting I18N
        Functions
        XML
        SQL
    File -> New -> Dynamic Web Project -> create tagdemo
    download: 
        https://mvnrepository.com/artifact/org.glassfish.web/javax.servlet.jsp.jstl/1.2.1
        https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/javax.servlet.jsp.jstl-api/1.2.1
        javax.servlet.jsp.jstl-1.2.1.jar
        javax.servlet.jsp.jstl-api-1.2.1.jar
    And then copy to: tagdemo/src/main/webapp/WEB-INF/lib
    Every page that uses the Core tags must include this reference:
        <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
    test.jsp
        <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
        <html>
        <body>
        <c:set var="stuff" value="<%= new java.util.Date() %>" />
        Time on the server is ${stuff}
        </body>
        </html>
JSTL Core Tags - Looping with forEach - Overview
    catch tag: catches any throwable to occurs in the boy
    choose tag: conditional tag that can be used for exclusive operations, similar to switch statement
    if tag: simple if/then conditional
    import tag: retrieves a URL and exposes its contents on the page or a variable
    forEach tag: Iterates over a collection of values
    forTokens tag: Iterates over a collection of tokens
    out tag: Used in scriptlets to display output, similar to <%= … %
JSTL Core Tags - Looping with forEach - Write some Code
JSTL Core Tags - Looping with forEach - Building HTML Tables
    src/main/java -> New -> Package -> com.luv2code.jsp.tagdemo
    com.luv2code.jsp.tagdemo -> New -> Class -> Student
    Student class:
        private String firstName;
        private String lastName;
        private boolean goldCustomer;
        Right Click -> Source -> Generate Constructor using Field
        Right Click -> Source -> Generate Getters and Setters
JSTL Core Tags - Testing Conditionals with the IF tag
    Conditional Tests: if tag is used for a conditional test
JSTL Core Tags - choose Tag

    ==================================================================================================================

                        JSP Standard Tag Library (JSTL) - Function Tags
                    
JSTL Function Tags - length, toUpperCase and startsWith
    JSTL Functions - Prefix “fn”
    Collection Length
        length
    String manipulation
        toUpperCase, toLowerCase
        substring, substringAfter, substringBefore
        trim, replace, indexOf, startsWith, endsWith
        contains, containsIgnoreCase, split, join, escapeXml
    Every page that uses the Function tags must include this reference:
        <%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
JSTL Function Tags - split and join
    Split Function: The fn:split() function splits a String into an array of substrings based on delimiter
    Join Function: The fn:join() function concatenates a String array into single String based on a delimiter

    ==================================================================================================================

                        Build a Multi-Lingual App with JSTL - i18n Tags

Multi-Lingual / Internationalization Overview
    Internationalization is the process of designing an application
        So it can be adapted to various languages/regions
        Without changes to the source code
    What is I18N?
        The term Internationalization is frequently abbreviated as I18N
        There are 18 letters between the first “i” and the last “n” 
    Formatting Messages
        We need to create translated versions of each label (no magic here)
        Based on user’s language selection, system will include appropriate text
        [greet]
        [first_name]: John
        [last_name]: Doe
        [welcome_message]
Multi-Lingual / Internationalization Messages
    Step 1: Create Resource Files
        Translated versions of our labels
        We will need to use Google Translate or similar translator service
        Must name the file using the locale
        Locale = Language Code + Country Code
        File name must follow specific format
            <our project file name>_LANGUAGECODE_COUNTRYCODE.properties
        Examples:   
            mylabels_es_ES.properties
            mylabels_de_DE.properties
            mylabels_en_GB.properties
        Language Codes based on ISO Standard 639-1 (2 letter code)
            https://en.wikipedia.org/wiki/ISO_639-1
        Country Codes based on ISO Standard 3166-2 (2 letter code)
            https://en.wikipedia.org/wiki/ISO_3166-2
    Step 2: Create JSP Page with labels
    Step 3: Update JSP page to change locale based on user selection
Build a Multi-Lingual App with JSTL - Step 1
    Create i18n.resources package
        solution-jsp-jstl-multi-lingual-app->src.com.luv2code.jsp.tagdemo -> New -> Package: i18n.resources
    Create file in i18n.resources package
        src.com.luv2code.jsp.tagdemo.i18n.resources -> New -> Other -> General -> File
            mylabels.properties
                Default resource file, there no reference to a specific locale.
                Basically the file will be used if we do nor have a locale file for a given language
            mylabels_es_ES.properties
            mylabels_de_DE.properties
Build a Multi-Lingual App with JSTL - Step 2
Build a Multi-Lingual App with JSTL - Step 3
    fmt:setBundle
        Tell JSP page which resource bundle to use
        basename: tell the base name of the file and then JSP will append the appropriate locale
            mylabels_<theLocale>.properties
            so can read all properties based on the appropriate locale that user selected
        <fmt:setBundle basename="com.luv2code.jsp.tagdemo.i18n.resources.mylabels" />
    
    ==================================================================================================================

                        Servlet Fundamentals
    
Hello World Servlet - Overview
    Java class that is processed on the server
    Java class generates HTML that is returned to browser
    Can read HTML form data, use cookies and sessions etc…
    At a high-level, similar functionality to JSPs
Hello World Servlet - Let's Write some Code
    File -> New -> Dynamic Web Project -> -> create Project: servletdemo
        Next -> Next 
            Generate web.xml deployment descriptor
    Create a new servlet
        servletdemo -> New -> Servlet 
            -> Java package: com.luv2code.servletdemo
            -> Class name: HelloWorldServlet
    Build to run web:
        Right click on HelloWorldServlet.java -> Run as -> Run on server
Comparing Servlets and JSP - What's the Difference
    JSPs
        HTML file with .jsp extension
        Contains static HTML
        JSP to generate HTML
        Has built-in JSP objects
    Servlets
        Java class file
        Generate all HTML
        More steps to access web objects
    Which One?
        Can use either one for building Java web apps
        Build entire site using only Servlets … or
        Build entire site using only JSPs
    Best Practice
        Integrate them both together!
            Servlet does the business logic
            JSP handles the presentation view
        Model-View-Controller (MVC) Design Pattern
Reading HTML Form Data with Servlets - Let's Write some Code
    servletdemo/src/main/webapp -> New -> File -> create student-form.html
    Create a new servlet
        Right click on com.luv2code.servletdemo -> New -> Servlet
            -> Class name: StudentServlet
    Build to run web:
        student-form.html -> Run as -> Run on server
Reading Servlet Parameters - Overview
    Servlet Configuration Parameters
        Our web app can make use of configuration parameters
        Located in standard file: WEB-INF/web.xml
Reading Servlet Parameters - Let's Write some Code
    servletdemo/src/main/webapp/WEB-INF/web.xml: Adding some context parameters or some config infomation
        <context-param>
            <param-name>max-shopping-cart-size</param-name>
            <param-value>99</param-value>
        </context-param>
        <context-param>
            <param-name>project-team-name</param-name>
            <param-value>The Coding Gurus</param-value>
        </context-param>
    Create a new servlet
        Right click on com.luv2code.servletdemo -> New -> Servlet
            -> Class name: TestParamServlet
    Build to run web:
        TestParamServlet.java -> Run as -> Run on server
    
    ==================================================================================================================

                        MVC - Build an MVC App with Servlets and JSP

MVC with Servlets and JSP - Overview
    Best Practice
        Integrate Servlets and JSP together
        Servlet does the business logic
        JSP handles the presentation view
    Benefits of MVC
        Minimizes HTML code in Servlet
            no more: out.println(…) in Servlet code
        Minimize Java business logic in JSPs
            no more large scriptlets in JSP code
    Servlet Can Call a JSP
        Servlet can call JSP using a request dispatcher
    Sending Data to JSP
        Servlet can add data to request object
    JSP page to view data
        JSP use JSTL to access data
MVC with Servlets and JSP - Let's Write some Code
    Add JSTL support to servletdemo project
        servletdemo/src/main/webapp/WEB-INF/lib
            javax.servlet.jsp.jstl-1.2.1.jar
            javax.servlet.jsp.jstl-api-1.2.1.jar
    Create Controller Servlet
        Right click on com.luv2code.servletdemo -> New -> Servlet
            -> Class name: MvcDemoServlet
    Build to run:
        Right click on MvcDemoServlet.java -> Run as -> Run on server
    Browser: http://localhost:8080/servletdemo/MvcDemoServlet
MVC with Servlets and JSP - Part 1 - Create Student Class
    Create mvctwo package
        com.luv2code.servletdemo -> New -> package -> mvctwo
    com.luv2code.servletdemo.mvctwo -> New -> Class -> create Student
    class Student -> Right click
        private String firstName;
        private String lastName;
        private String email;
        Right Click -> Source -> Generate Constructor using Field
        Right Click -> Source -> Generate Getters and Setters
MVC with Servlets and JSP - Part 2 - Create StudentDataUtil(Model)
    com.luv2code.servletdemo.mvctwo -> New -> Class -> create StudentDataUtil
MVC with Servlets and JSP - Part 3 - Create MVC Servlet(Controller)
    com.luv2code.servletdemo.mvctwo -> New -> Servlet -> MvcDemoServletTwo
MVC with Servlets and JSP - Part 4 - Create JSP View with HTML Tables
    servletdemo/src/main/webapp -> New -> File -> create view_students_two.jsp
    Build to run:
        Right click on MvcDemoServletTwo.java -> Run as -> Run on server
    Browser: http://localhost:8080/servletdemo/MvcDemoServletTwo
    servletdemo/src/main/webapp -> New -> File -> create index.html
    Build to run:
        Right click on index.html -> Run as -> Run on server
    
    ==================================================================================================================

                        Build A Complete Database Web App with JDBC

Road map
    Set up Database Dev Environment
    List Students 
    Add a new Student
    Update a new Student
    Delete a new Student
    